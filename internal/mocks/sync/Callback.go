// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package sync

import (
	mock "github.com/stretchr/testify/mock"
)

// NewCallback creates a new instance of Callback. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCallback(t interface {
	mock.TestingT
	Cleanup(func())
}) *Callback {
	mock := &Callback{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Callback is an autogenerated mock type for the Callback type
type Callback struct {
	mock.Mock
}

type Callback_Expecter struct {
	mock *mock.Mock
}

func (_m *Callback) EXPECT() *Callback_Expecter {
	return &Callback_Expecter{mock: &_m.Mock}
}

// OnFailure provides a mock function for the type Callback
func (_mock *Callback) OnFailure(err error) {
	_mock.Called(err)
	return
}

// Callback_OnFailure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnFailure'
type Callback_OnFailure_Call struct {
	*mock.Call
}

// OnFailure is a helper method to define mock.On call
//   - err
func (_e *Callback_Expecter) OnFailure(err interface{}) *Callback_OnFailure_Call {
	return &Callback_OnFailure_Call{Call: _e.mock.On("OnFailure", err)}
}

func (_c *Callback_OnFailure_Call) Run(run func(err error)) *Callback_OnFailure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *Callback_OnFailure_Call) Return() *Callback_OnFailure_Call {
	_c.Call.Return()
	return _c
}

func (_c *Callback_OnFailure_Call) RunAndReturn(run func(err error)) *Callback_OnFailure_Call {
	_c.Run(run)
	return _c
}

// OnSuccess provides a mock function for the type Callback
func (_mock *Callback) OnSuccess() {
	_mock.Called()
	return
}

// Callback_OnSuccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnSuccess'
type Callback_OnSuccess_Call struct {
	*mock.Call
}

// OnSuccess is a helper method to define mock.On call
func (_e *Callback_Expecter) OnSuccess() *Callback_OnSuccess_Call {
	return &Callback_OnSuccess_Call{Call: _e.mock.On("OnSuccess")}
}

func (_c *Callback_OnSuccess_Call) Run(run func()) *Callback_OnSuccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Callback_OnSuccess_Call) Return() *Callback_OnSuccess_Call {
	_c.Call.Return()
	return _c
}

func (_c *Callback_OnSuccess_Call) RunAndReturn(run func()) *Callback_OnSuccess_Call {
	_c.Run(run)
	return _c
}
