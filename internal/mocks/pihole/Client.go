// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package pihole

import (
	"github.com/lovelaze/nebula-sync/internal/pihole/model"
	mock "github.com/stretchr/testify/mock"
)

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// APIPath provides a mock function for the type Client
func (_mock *Client) APIPath(target string) string {
	ret := _mock.Called(target)

	if len(ret) == 0 {
		panic("no return value specified for APIPath")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(target)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Client_APIPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'APIPath'
type Client_APIPath_Call struct {
	*mock.Call
}

// APIPath is a helper method to define mock.On call
//   - target
func (_e *Client_Expecter) APIPath(target interface{}) *Client_APIPath_Call {
	return &Client_APIPath_Call{Call: _e.mock.On("APIPath", target)}
}

func (_c *Client_APIPath_Call) Run(run func(target string)) *Client_APIPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_APIPath_Call) Return(s string) *Client_APIPath_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Client_APIPath_Call) RunAndReturn(run func(target string) string) *Client_APIPath_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSession provides a mock function for the type Client
func (_mock *Client) DeleteSession() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeleteSession")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Client_DeleteSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSession'
type Client_DeleteSession_Call struct {
	*mock.Call
}

// DeleteSession is a helper method to define mock.On call
func (_e *Client_Expecter) DeleteSession() *Client_DeleteSession_Call {
	return &Client_DeleteSession_Call{Call: _e.mock.On("DeleteSession")}
}

func (_c *Client_DeleteSession_Call) Run(run func()) *Client_DeleteSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_DeleteSession_Call) Return(err error) *Client_DeleteSession_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Client_DeleteSession_Call) RunAndReturn(run func() error) *Client_DeleteSession_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfig provides a mock function for the type Client
func (_mock *Client) GetConfig() (*model.ConfigResponse, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 *model.ConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*model.ConfigResponse, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *model.ConfigResponse); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type Client_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
func (_e *Client_Expecter) GetConfig() *Client_GetConfig_Call {
	return &Client_GetConfig_Call{Call: _e.mock.On("GetConfig")}
}

func (_c *Client_GetConfig_Call) Run(run func()) *Client_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_GetConfig_Call) Return(configResponse *model.ConfigResponse, err error) *Client_GetConfig_Call {
	_c.Call.Return(configResponse, err)
	return _c
}

func (_c *Client_GetConfig_Call) RunAndReturn(run func() (*model.ConfigResponse, error)) *Client_GetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeleporter provides a mock function for the type Client
func (_mock *Client) GetTeleporter() ([]byte, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTeleporter")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []byte); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_GetTeleporter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeleporter'
type Client_GetTeleporter_Call struct {
	*mock.Call
}

// GetTeleporter is a helper method to define mock.On call
func (_e *Client_Expecter) GetTeleporter() *Client_GetTeleporter_Call {
	return &Client_GetTeleporter_Call{Call: _e.mock.On("GetTeleporter")}
}

func (_c *Client_GetTeleporter_Call) Run(run func()) *Client_GetTeleporter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_GetTeleporter_Call) Return(bytes []byte, err error) *Client_GetTeleporter_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *Client_GetTeleporter_Call) RunAndReturn(run func() ([]byte, error)) *Client_GetTeleporter_Call {
	_c.Call.Return(run)
	return _c
}

// PatchConfig provides a mock function for the type Client
func (_mock *Client) PatchConfig(patchRequest *model.PatchConfigRequest) error {
	ret := _mock.Called(patchRequest)

	if len(ret) == 0 {
		panic("no return value specified for PatchConfig")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*model.PatchConfigRequest) error); ok {
		r0 = returnFunc(patchRequest)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Client_PatchConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchConfig'
type Client_PatchConfig_Call struct {
	*mock.Call
}

// PatchConfig is a helper method to define mock.On call
//   - patchRequest
func (_e *Client_Expecter) PatchConfig(patchRequest interface{}) *Client_PatchConfig_Call {
	return &Client_PatchConfig_Call{Call: _e.mock.On("PatchConfig", patchRequest)}
}

func (_c *Client_PatchConfig_Call) Run(run func(patchRequest *model.PatchConfigRequest)) *Client_PatchConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.PatchConfigRequest))
	})
	return _c
}

func (_c *Client_PatchConfig_Call) Return(err error) *Client_PatchConfig_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Client_PatchConfig_Call) RunAndReturn(run func(patchRequest *model.PatchConfigRequest) error) *Client_PatchConfig_Call {
	_c.Call.Return(run)
	return _c
}

// PostAuth provides a mock function for the type Client
func (_mock *Client) PostAuth() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for PostAuth")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Client_PostAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostAuth'
type Client_PostAuth_Call struct {
	*mock.Call
}

// PostAuth is a helper method to define mock.On call
func (_e *Client_Expecter) PostAuth() *Client_PostAuth_Call {
	return &Client_PostAuth_Call{Call: _e.mock.On("PostAuth")}
}

func (_c *Client_PostAuth_Call) Run(run func()) *Client_PostAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_PostAuth_Call) Return(err error) *Client_PostAuth_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Client_PostAuth_Call) RunAndReturn(run func() error) *Client_PostAuth_Call {
	_c.Call.Return(run)
	return _c
}

// PostRunGravity provides a mock function for the type Client
func (_mock *Client) PostRunGravity() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for PostRunGravity")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Client_PostRunGravity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostRunGravity'
type Client_PostRunGravity_Call struct {
	*mock.Call
}

// PostRunGravity is a helper method to define mock.On call
func (_e *Client_Expecter) PostRunGravity() *Client_PostRunGravity_Call {
	return &Client_PostRunGravity_Call{Call: _e.mock.On("PostRunGravity")}
}

func (_c *Client_PostRunGravity_Call) Run(run func()) *Client_PostRunGravity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_PostRunGravity_Call) Return(err error) *Client_PostRunGravity_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Client_PostRunGravity_Call) RunAndReturn(run func() error) *Client_PostRunGravity_Call {
	_c.Call.Return(run)
	return _c
}

// PostTeleporter provides a mock function for the type Client
func (_mock *Client) PostTeleporter(payload []byte, teleporterRequest *model.PostTeleporterRequest) error {
	ret := _mock.Called(payload, teleporterRequest)

	if len(ret) == 0 {
		panic("no return value specified for PostTeleporter")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]byte, *model.PostTeleporterRequest) error); ok {
		r0 = returnFunc(payload, teleporterRequest)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Client_PostTeleporter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTeleporter'
type Client_PostTeleporter_Call struct {
	*mock.Call
}

// PostTeleporter is a helper method to define mock.On call
//   - payload
//   - teleporterRequest
func (_e *Client_Expecter) PostTeleporter(payload interface{}, teleporterRequest interface{}) *Client_PostTeleporter_Call {
	return &Client_PostTeleporter_Call{Call: _e.mock.On("PostTeleporter", payload, teleporterRequest)}
}

func (_c *Client_PostTeleporter_Call) Run(run func(payload []byte, teleporterRequest *model.PostTeleporterRequest)) *Client_PostTeleporter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(*model.PostTeleporterRequest))
	})
	return _c
}

func (_c *Client_PostTeleporter_Call) Return(err error) *Client_PostTeleporter_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Client_PostTeleporter_Call) RunAndReturn(run func(payload []byte, teleporterRequest *model.PostTeleporterRequest) error) *Client_PostTeleporter_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function for the type Client
func (_mock *Client) String() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Client_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type Client_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *Client_Expecter) String() *Client_String_Call {
	return &Client_String_Call{Call: _e.mock.On("String")}
}

func (_c *Client_String_Call) Run(run func()) *Client_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_String_Call) Return(s string) *Client_String_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Client_String_Call) RunAndReturn(run func() string) *Client_String_Call {
	_c.Call.Return(run)
	return _c
}
